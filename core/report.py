from telegram import Update
from telegram.ext import ContextTypes
from datetime import datetime, timedelta, time
import sqlite3
import pandas as pd
from io import BytesIO

ADMIN_IDS = [414634622, 1745732977]

async def generate_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text(
            "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞.",
            parse_mode="Markdown"
        )
        return

    # 1) –†–∞–∑–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: /report [start] [end]
    args = context.args
    start_date = end_date = None
    try:
        if len(args) >= 1:
            start_date = datetime.strptime(args[0], "%d.%m.%Y").date()
        if len(args) >= 2:
            end_date = datetime.strptime(args[1], "%d.%m.%Y").date()
    except ValueError:
        await update.message.reply_text(
            "üìå –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n/report –î–î.MM.–ì–ì–ì–ì [–î–î.MM.–ì–ì–ì–ì]",
            parse_mode="Markdown"
        )
        return

    # 2) –í—ã—Ç—è–≥–∏–≤–∞–µ–º –≤—Å–µ –ø–æ–µ–∑–¥–∫–∏
    conn = sqlite3.connect("court_tracking.db")
    df = pd.read_sql("""
        SELECT e.full_name AS –§–ò–û,
               t.organization_name AS –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è,
               t.start_datetime,
               t.end_datetime
        FROM trips t
        JOIN employees e ON t.user_id = e.user_id
        WHERE e.is_active = 1
        ORDER BY t.start_datetime
    """, conn)
    conn.close()

    if df.empty:
        await update.message.reply_text(
            "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞.",
            parse_mode="Markdown"
        )
        return

    # 3) –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ —á–µ—Ä–µ–∑ –ø–æ–¥—Å—Ç—Ä–æ–∫—É YYYY-MM-DD
    if start_date:
        iso = start_date.isoformat()
        df = df[df['start_datetime'].astype(str).str.contains(iso, na=False)]
    if end_date and start_date and end_date != start_date:
        days = pd.date_range(start_date, end_date).date
        mask = pd.Series(False, index=df.index)
        for d in days:
            mask |= df['start_datetime'].astype(str).str.contains(d.isoformat(), na=False)
        df = df[mask]

    if df.empty:
        await update.message.reply_text(
            "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.",
            parse_mode="Markdown"
        )
        return

    # 4) –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫–∏

    # –î–∞—Ç–∞: –î–î.MM.–ì–ì–ì–ì
    df['–î–∞—Ç–∞'] = (
        pd.to_datetime(df['start_datetime'].str.slice(0, 10),
                       format="%Y-%m-%d", errors="coerce")
          .dt.strftime("%d.%m.%Y")
    )

    # –ù–∞—á–∞–ª–æ –ø–æ–µ–∑–¥–∫–∏: –ß–ß:–ú–ú
    df['–ù–∞—á–∞–ª–æ –ø–æ–µ–∑–¥–∫–∏'] = df['start_datetime'].astype(str).str.slice(11, 16)

    # –ö–æ–Ω–µ—Ü –ø–æ–µ–∑–¥–∫–∏: –ß–ß:–ú–ú –∏–ª–∏ '-'
    df['–ö–æ–Ω–µ—Ü –ø–æ–µ–∑–¥–∫–∏'] = (
        df['end_datetime'].astype(str).str.slice(11, 16).fillna("-")
    )

    # 5) –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—á—á:–º–º)
    def calc_duration(row):
        s = row['–ù–∞—á–∞–ª–æ –ø–æ–µ–∑–¥–∫–∏']
        e = row['–ö–æ–Ω–µ—Ü –ø–æ–µ–∑–¥–∫–∏']
        if s == "-" or e in (None, "-", ""):
            return "-"
        try:
            dt_s = datetime.strptime(s, "%H:%M")
            dt_e = datetime.strptime(e, "%H:%M")
        except ValueError:
            return "-"
        delta = dt_e - dt_s
        if delta.total_seconds() < 0:
            delta += timedelta(days=1)
        h = delta.seconds // 3600
        m = (delta.seconds % 3600) // 60
        return f"{h:02}:{m:02}"

    df['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'] = df.apply(calc_duration, axis=1)

    # 6) –ò—Ç–æ–≥–æ–≤—ã–π DataFrame
    final = df[[
        '–§–ò–û',
        '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è',
        '–î–∞—Ç–∞',
        '–ù–∞—á–∞–ª–æ –ø–æ–µ–∑–¥–∫–∏',
        '–ö–æ–Ω–µ—Ü –ø–æ–µ–∑–¥–∫–∏',
        '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'
    ]]

    # 7) –ó–∞–ø–∏—Å—å –≤ Excel —Å –∞–≤—Ç–æ‚Äë—à–∏—Ä–∏–Ω–æ–π —Å—Ç–æ–ª–±—Ü–æ–≤
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        final.to_excel(writer, sheet_name='–û—Ç—á—ë—Ç', index=False)
        ws = writer.sheets['–û—Ç—á—ë—Ç']
        for idx, col in enumerate(final.columns):
            width = max(final[col].astype(str).map(len).max(), len(col)) + 2
            ws.set_column(idx, idx, width)
    output.seek(0)

    # 8) –ò–º—è —Ñ–∞–π–ª–∞: ¬´–æ—Ç—á–µ—Ç –ø–æ –ø–æ–µ–∑–¥–∫–∞–º –¥–¥.–º–º.–≥–≥–≥–≥_—á—á.–º–º¬ª
    now = datetime.now()
    fname = f"–æ—Ç—á–µ—Ç –ø–æ –ø–æ–µ–∑–¥–∫–∞–º {now.strftime('%d.%m.%Y_%H.%M')}.xlsx"

    # 9) –û—Ç–ø—Ä–∞–≤–∫–∞
    await update.message.reply_document(
        document=output,
        filename=fname
    )
    await update.message.reply_text(
        "üìÑ –û—Ç—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.",
        parse_mode="Markdown"
    )
