# trip.py

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from utils.database import is_registered, save_trip_start, get_now
from core.sheets import add_trip, end_trip_in_sheet   # ‚Üê –¥–æ–ø–∏—Å–∞–ª–∏
import sqlite3

ORGANIZATIONS = {
    'kuzminsky': "–ö—É–∑—å–º–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'lefortovsky': "–õ–µ—Ñ–æ—Ä—Ç–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'lyublinsky': "–õ—é–±–ª–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'meshchansky': "–ú–µ—â–∞–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'nagatinsky': "–ù–∞–≥–∞—Ç–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'perovsky': "–ü–µ—Ä–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'shcherbinsky': "–©–µ—Ä–±–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'tverskoy': "–¢–≤–µ—Ä—Å–∫–æ–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'cheremushkinsky': "–ß–µ—Ä–µ–º—É—à–∫–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'chertanovsky': "–ß–µ—Ä—Ç–∞–Ω–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'msk_city': "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –≥–æ—Ä–æ–¥—Å–∫–æ–π —Å—É–¥",
    'kassatsionny2': "–í—Ç–æ—Ä–æ–π –∫–∞—Å—Å–∞—Ü–∏–æ–Ω–Ω—ã–π —Å—É–¥ –æ–±—â–µ–π —é—Ä–∏—Å–¥–∏–∫—Ü–∏–∏",
    'domodedovo': "–î–æ–º–æ–¥–µ–¥–æ–≤—Å–∫–∏–π –≥–æ—Ä–æ–¥—Å–∫–æ–π —Å—É–¥",
    'lyuberetsky': "–õ—é–±–µ—Ä–µ—Ü–∫–∏–π –≥–æ—Ä–æ–¥—Å–∫–æ–π —Å—É–¥",
    'vidnoye': "–í–∏–¥–Ω–æ–≤—Å–∫–∏–π –≥–æ—Ä–æ–¥—Å–∫–æ–π —Å—É–¥",
    'justice_peace': "–ú–∏—Ä–æ–≤—ã–µ —Å—É–¥—å–∏ (—Å—É–¥–µ–±–Ω—ã–π —É—á–∞—Å—Ç–æ–∫)",
    'fns': "–§–ù–°",
    'gibdd': "–ì–ò–ë–î–î",
    'notary': "–ù–æ—Ç–∞—Ä–∏—É—Å",
    'post': "–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏",
    'rosreestr': "–†–æ—Å—Ä–µ–µ—Å—Ç—Ä",
    'other': "–î—Ä—É–≥–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è (—É–∫–∞–∑–∞—Ç—å)"
}

async def start_trip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if not is_registered(user_id):
        return await update.message.reply_text(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: `/register –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω`",
            parse_mode="Markdown"
        )

    keyboard = [
        [InlineKeyboardButton(name, callback_data=f"org_{org_id}")]
        for org_id, name in ORGANIZATIONS.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üöó *–ö—É–¥–∞ –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å?*\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –Ω–∏–∂–µ:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def handle_trip_save(update: Update, context, org_id: str, org_name: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ç–æ–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (inline‚Äë–∫–Ω–æ–ø–∫–∏)."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    success = save_trip_start(user_id, org_id, org_name)
    now = get_now()
    time_now = now.strftime('%H:%M')

    if success:
        # –≤ SQLite —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, —Ç–µ–ø–µ—Ä—å –ø–∏—à–µ–º —Å—Ç–∞—Ä—Ç –≤ Sheets
        add_trip(
            full_name := sqlite3.connect("court_tracking.db")
                               .execute("SELECT full_name FROM employees WHERE user_id=?", (user_id,))
                               .fetchone()[0],
            org_name,
            now
        )
        await query.edit_message_text(
            f"üöå –ü–æ–µ–∑–¥–∫–∞ –≤ *{org_name}* –Ω–∞—á–∞—Ç–∞ –≤ *{time_now}*\n–•–æ—Ä–æ—à–µ–π –¥–æ—Ä–æ–≥–∏! üöó",
            parse_mode="Markdown"
        )
    else:
        await query.edit_message_text(
            "‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –ø–æ–µ–∑–¥–∫—É.*\n–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –≤ –ø—É—Ç–∏.",
            parse_mode="Markdown"
        )

async def end_trip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è ‚Äò–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–µ–∑–¥–∫—É‚Äô."""
    query = update.callback_query
    if query:
        await query.answer()
        target = query
        user_id = query.from_user.id
    else:
        target = update.message
        user_id = update.message.from_user.id

    now = get_now()

    conn = sqlite3.connect('court_tracking.db')
    cur = conn.cursor()
    cur.execute('''
        UPDATE trips 
        SET end_datetime = ?, status = 'completed'
        WHERE user_id = ? AND status = 'in_progress'
    ''', (now, user_id))
    updated = cur.rowcount
    conn.commit()

    if updated:
        # –¥–æ—Å—Ç–∞—ë–º –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –≤ Sheets
        cur.execute('''
            SELECT full_name, org_name, start_datetime 
            FROM trips 
            WHERE user_id=? AND status='completed'
            ORDER BY start_datetime DESC LIMIT 1
        ''', (user_id,))
        full_name, org_name, start_dt = cur.fetchone()
        conn.close()

        # –ó–ê–ü–ò–°–´–í–ê–ï–ú –í SHEETS –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        await end_trip_in_sheet(full_name, org_name, start_dt, now, now - start_dt)

        await target.reply_text(
            f"üèÅ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ—Ñ–∏—Å!\n"
            f"–ü–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ *{now.strftime('%H:%M')}*",
            parse_mode="Markdown"
        )
    else:
        conn.close()
        await target.reply_text(
            "‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏*",
            parse_mode="Markdown"
        )
