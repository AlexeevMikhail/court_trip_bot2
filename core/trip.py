# core/trip.py

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
import sqlite3
from utils.database import is_registered, save_trip_start, get_now
from core.sheets import add_trip, end_trip_in_sheet

# –°–ª–æ–≤–∞—Ä—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
ORGANIZATIONS = {
    'kuzminsky': "–ö—É–∑—å–º–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'lefortovsky': "–õ–µ—Ñ–æ—Ä—Ç–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'lyublinsky': "–õ—é–±–ª–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'meshchansky': "–ú–µ—â–∞–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'nagatinsky': "–ù–∞–≥–∞—Ç–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'perovsky': "–ü–µ—Ä–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'shcherbinsky': "–©–µ—Ä–±–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'tverskoy': "–¢–≤–µ—Ä—Å–∫–æ–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'cheremushkinsky': "–ß–µ—Ä–µ–º—É—à–∫–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'chertanovsky': "–ß–µ—Ä—Ç–∞–Ω–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'msk_city': "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –≥–æ—Ä–æ–¥—Å–∫–æ–π —Å—É–¥",
    'kassatsionny2': "–í—Ç–æ—Ä–æ–π –∫–∞—Å—Å–∞—Ü–∏–æ–Ω–Ω—ã–π —Å—É–¥ –æ–±—â–µ–π —é—Ä–∏—Å–¥–∏–∫—Ü–∏–∏",
    'domodedovo': "–î–æ–º–æ–¥–µ–¥–æ–≤—Å–∫–∏–π –≥–æ—Ä–æ–¥—Å–∫–æ–π —Å—É–¥",
    'lyuberetsky': "–õ—é–±–µ—Ä–µ—Ü–∫–∏–π –≥–æ—Ä–æ–¥—Å–∫–æ–π —Å—É–¥",
    'vidnoye': "–í–∏–¥–Ω–æ–≤—Å–∫–∏–π –≥–æ—Ä–æ–¥—Å–∫–æ–π —Å—É–¥",
    'justice_peace': "–ú–∏—Ä–æ–≤—ã–µ —Å—É–¥—å–∏ (—Å—É–¥–µ–±–Ω—ã–π —É—á–∞—Å—Ç–æ–∫)",
    'fns': "–§–ù–°",
    'gibdd': "–ì–ò–ë–î–î",
    'notary': "–ù–æ—Ç–∞—Ä–∏—É—Å",
    'post': "–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏",
    'rosreestr': "–†–æ—Å—Ä–µ–µ—Å—Ç—Ä",
    'other': "–î—Ä—É–≥–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è (—É–∫–∞–∑–∞—Ç—å)"
}

async def start_trip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_registered(user_id):
        await update.message.reply_text(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: /register –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω"
        )
        return

    keyboard = [
        [InlineKeyboardButton(name, callback_data=f"org_{org_id}")]
        for org_id, name in ORGANIZATIONS.items()
    ]
    await update.message.reply_text(
        "üöó *–ö—É–¥–∞ –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å?*",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_custom_org_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    custom_org = update.message.text.strip()
    if not custom_org or not is_registered(user_id):
        await update.message.reply_text("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.")
        return

    success = save_trip_start(user_id, "other", custom_org)
    now = get_now()
    time_now = now.strftime("%H:%M")

    if not success:
        await update.message.reply_text("‚ùå –£–∂–µ –≤ –ø–æ–µ–∑–¥–∫–µ.")
        return

    conn = sqlite3.connect("court_tracking.db")
    cur = conn.cursor()
    cur.execute("SELECT full_name FROM employees WHERE user_id = ?", (user_id,))
    full_name = cur.fetchone()[0]
    conn.close()

    try:
        add_trip(full_name, custom_org, now)
    except Exception as e:
        print(f"[Google Sheets] –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—Ç–∞: {e}")

    await update.message.reply_text(
        f"üöÄ –ü–æ–µ–∑–¥–∫–∞ –≤ *{custom_org}* –Ω–∞—á–∞—Ç–∞ –≤ *{time_now}*",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("üè¶ –í–æ–∑–≤—Ä–∞—Ç", callback_data="return_trip")]]
        )
    )

async def handle_trip_save(update: Update, context, org_id: str, org_name: str):
    user_id = update.effective_user.id
    success = save_trip_start(user_id, org_id, org_name)
    now = get_now()
    time_now = now.strftime("%H:%M")

    if not success:
        await update.callback_query.edit_message_text(
            "‚ùå –£–∂–µ –≤ –ø–æ–µ–∑–¥–∫–µ.",
            parse_mode="Markdown"
        )
        return

    conn = sqlite3.connect("court_tracking.db")
    cur = conn.cursor()
    cur.execute("SELECT full_name FROM employees WHERE user_id = ?", (user_id,))
    full_name = cur.fetchone()[0]
    conn.close()

    try:
        add_trip(full_name, org_name, now)
    except Exception as e:
        print(f"[Google Sheets] –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—Ç–∞: {e}")

    await update.callback_query.edit_message_text(
        f"üöå –ü–æ–µ–∑–¥–∫–∞ –≤ *{org_name}* –Ω–∞—á–∞—Ç–∞ –≤ *{time_now}*",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("üè¶ –í–æ–∑–≤—Ä–∞—Ç", callback_data="return_trip")]]
        )
    )

async def end_trip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    now = get_now()

    conn = sqlite3.connect("court_tracking.db")
    cur = conn.cursor()
    cur.execute(
        "UPDATE trips SET end_datetime = ?, status = 'completed' "
        "WHERE user_id = ? AND status = 'in_progress'",
        (now, user_id)
    )
    updated = cur.rowcount
    conn.commit()

    if updated:
        cur.execute(
            "SELECT full_name, org_name, start_datetime FROM trips "
            "WHERE user_id = ? AND status = 'completed' "
            "ORDER BY start_datetime DESC LIMIT 1",
            (user_id,)
        )
        full_name, org_name, start_dt = cur.fetchone()
    conn.close()

    if updated:
        duration = now - start_dt
        try:
            await end_trip_in_sheet(full_name, org_name, start_dt, now, duration)
        except Exception as e:
            print(f"[Google Sheets] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–µ–∑–¥–∫–∏: {e}")

        await update.effective_message.reply_text(
            f"üèÅ –ü–æ–µ–∑–¥–∫–∞ –≤ *{org_name}* –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ *{now.strftime('%H:%M')}*",
            parse_mode="Markdown"
        )
    else:
        await update.effective_message.reply_text(
            "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏.",
            parse_mode="Markdown"
        )
