# core/trip.py

import sqlite3
from datetime import datetime
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

from utils.database import is_registered, save_trip_start, get_now
from core.sheets import add_trip, end_trip_in_sheet

# –°–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
ORGANIZATIONS = {
    'kuzminsky':       "–ö—É–∑—å–º–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'lefortovsky':     "–õ–µ—Ñ–æ—Ä—Ç–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'lyublinsky':      "–õ—é–±–ª–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'meshchansky':     "–ú–µ—â–∞–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'nagatinsky':      "–ù–∞–≥–∞—Ç–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'perovsky':        "–ü–µ—Ä–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'shcherbinsky':    "–©–µ—Ä–±–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'tverskoy':        "–¢–≤–µ—Ä—Å–∫–æ–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'cheromushkinsky': "–ß–µ—Ä—ë–º—É—à–∫–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'chertanovsky':    "–ß–µ—Ä—Ç–∞–Ω–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'msk_city':        "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –≥–æ—Ä–æ–¥—Å–∫–æ–π —Å—É–¥",
    'kassatsionny2':   "–í—Ç–æ—Ä–æ–π –∫–∞—Å—Å–∞—Ü–∏–æ–Ω–Ω—ã–π —Å—É–¥ –æ–±—â–µ–π —é—Ä–∏—Å–¥–∏–∫—Ü–∏–∏",
    'domodedovo':      "–î–æ–º–æ–¥–µ–¥–æ–≤—Å–∫–∏–π –≥–æ—Ä–æ–¥—Å–∫–æ–π —Å—É–¥",
    'lyuberetsky':     "–õ—é–±–µ—Ä–µ—Ü–∫–∏–π –≥–æ—Ä–æ–¥—Å–∫–æ–π —Å—É–¥",
    'vidnoye':         "–í–∏–¥–Ω–æ–≤—Å–∫–∏–π –≥–æ—Ä–æ–¥—Å–∫–æ–π —Å—É–¥",
    'justice_peace':   "–ú–∏—Ä–æ–≤—ã–µ —Å—É–¥—å–∏ (—Å—É–¥–µ–±–Ω—ã–π —É—á–∞—Å—Ç–æ–∫)",
    'fns':             "–§–ù–°",
    'gibdd':           "–ì–ò–ë–î–î",
    'notary':          "–ù–æ—Ç–∞—Ä–∏—É—Å",
    'post':            "–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏",
    'rosreestr':       "–†–æ—Å—Ä–µ–µ—Å—Ç—Ä",
    'other':           "–î—Ä—É–≥–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è (–≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é)"
}


async def start_trip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    print(f"[trip] start_trip triggered by user {user_id}")
    if not is_registered(user_id):
        print(f"[trip] user {user_id} is NOT registered")
        return await update.message.reply_text(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ /register –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω"
        )

    print(f"[trip] user {user_id} is registered ‚Äî sending organization keyboard")
    keyboard = [
        [InlineKeyboardButton(name, callback_data=f"org_{org_id}")]
        for org_id, name in ORGANIZATIONS.items()
    ]
    await update.message.reply_text(
        "üöó *–ö—É–¥–∞ –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å?*",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def handle_org_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    org_id = query.data.split("_", 1)[1]
    print(f"[trip] handle_org_selection: user={user_id}, org_id={org_id}")

    # –µ—Å–ª–∏ ¬´–î—Ä—É–≥–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è¬ª
    if org_id == "other":
        context.user_data["awaiting_custom_org"] = True
        print(f"[trip] awaiting custom org from user {user_id}")
        return await query.edit_message_text(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä—É—á–Ω—É—é:"
        )

    org_name = ORGANIZATIONS.get(org_id, org_id)
    print(f"[trip] resolved org_name = '{org_name}'")

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—Ç (–≤–Ω—É—Ç—Ä–∏ save_trip_start —É–∂–µ —É—á—Ç–µ–Ω—ã DEBUG_MODE –∏ —á–∞—Å—ã)
    success = save_trip_start(user_id, org_id, org_name)
    print(f"[trip] save_trip_start returned {success}")
    if not success:
        # –ª–∏–±–æ —É–∂–µ in_progress, –ª–∏–±–æ –≤–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        return await query.edit_message_text(
            "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞ –∏–ª–∏ –≤—ã –≤–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."
        )

    now = get_now()
    time_str = now.strftime("%H:%M")
    print(f"[trip] trip start time (get_now) = {now!r}")

    # –±–µ—Ä—ë–º –§–ò–û –∏–∑ –ë–î
    conn = sqlite3.connect("court_tracking.db")
    full_name = conn.execute(
        "SELECT full_name FROM employees WHERE user_id = ?", (user_id,)
    ).fetchone()[0]
    conn.close()
    print(f"[trip] full_name fetched = '{full_name}'")

    # –ø–∏—à–µ–º –≤ Google Sheets
    try:
        print(f"[trip] calling add_trip({full_name}, {org_name}, {now!r})")
        add_trip(full_name, org_name, now)
        print("[trip] add_trip succeeded")
    except Exception as e:
        print(f"[trip][ERROR] add_trip failed: {e}")

    await query.edit_message_text(
        f"üöå –ü–æ–µ–∑–¥–∫–∞ –≤ *{org_name}* –Ω–∞—á–∞—Ç–∞ –≤ *{time_str}*",
        parse_mode="Markdown"
    )


async def handle_custom_org_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    print(f"[trip] handle_custom_org_input triggered by user {user_id}")
    if not context.user_data.get("awaiting_custom_org"):
        print("[trip] unexpected custom input, ignoring")
        return
    context.user_data.pop("awaiting_custom_org", None)

    org_name = update.message.text.strip()
    print(f"[trip] custom org_name = '{org_name}'")

    success = save_trip_start(user_id, "other", org_name)
    print(f"[trip] save_trip_start(custom) returned {success}")
    if not success:
        return await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞ –∏–ª–∏ –≤—ã –≤–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."
        )

    now = get_now()
    time_str = now.strftime("%H:%M")
    print(f"[trip] custom-trip start time = {now!r}")

    conn = sqlite3.connect("court_tracking.db")
    full_name = conn.execute(
        "SELECT full_name FROM employees WHERE user_id = ?", (user_id,)
    ).fetchone()[0]
    conn.close()
    print(f"[trip] full_name fetched = '{full_name}'")

    try:
        print(f"[trip] calling add_trip(custom) with ({full_name}, {org_name}, {now!r})")
        add_trip(full_name, org_name, now)
        print("[trip] add_trip(custom) succeeded")
    except Exception as e:
        print(f"[trip][ERROR] add_trip(custom org) failed: {e}")

    await update.message.reply_text(
        f"üöå –ü–æ–µ–∑–¥–∫–∞ –≤ *{org_name}* –Ω–∞—á–∞—Ç–∞ –≤ *{time_str}*",
        parse_mode="Markdown"
    )


async def end_trip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ callback_query –∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ ¬´–í–æ–∑–≤—Ä–∞—Ç¬ª
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        target = query
        user_id = query.from_user.id
        print(f"[trip] end_trip (callback) triggered by user {user_id}")
    else:
        target = update.message
        user_id = update.message.from_user.id
        print(f"[trip] end_trip (message) triggered by user {user_id}")

    now = get_now()
    print(f"[trip] end_trip get_now = {now!r}")

    conn = sqlite3.connect("court_tracking.db")
    cur = conn.cursor()

    # –ø–æ–º–µ—á–∞–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π —Ç–µ–∫—É—â—É—é
    cur.execute(
        "UPDATE trips SET end_datetime = ?, status = 'completed' "
        "WHERE user_id = ? AND status = 'in_progress'",
        (now, user_id)
    )
    updated = cur.rowcount
    print(f"[trip] UPDATE trips rowcount = {updated}")
    if updated == 0:
        conn.commit()
        conn.close()
        print(f"[trip] no in_progress trip found for user {user_id}")
        return await target.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏.")
    conn.commit()

    # –∑–∞–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–∫—Ä—ã—Ç—É—é –ø–æ–µ–∑–¥–∫—É
    cur.execute(
        "SELECT organization_name, start_datetime "
        "FROM trips "
        "WHERE user_id = ? AND status = 'completed' "
        "ORDER BY start_datetime DESC LIMIT 1",
        (user_id,)
    )
    org_name, start_dt = cur.fetchone()
    print(f"[trip] fetched org_name = '{org_name}', start_dt raw = {start_dt!r}")

    # –ø–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –Ω–∞–¥–æ
    if isinstance(start_dt, str):
        try:
            start_dt = datetime.fromisoformat(start_dt)
        except ValueError:
            start_dt = datetime.strptime(start_dt, "%Y-%m-%d %H:%M:%S")
        print(f"[trip] parsed start_dt = {start_dt!r}")

    # –§–ò–û
    full_name = conn.execute(
        "SELECT full_name FROM employees WHERE user_id = ?", (user_id,)
    ).fetchone()[0]
    conn.close()
    print(f"[trip] full_name fetched = '{full_name}'")

    # –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    duration = now - start_dt
    print(f"[trip] computed duration = {duration!r}")

    # –ø–∏—à–µ–º –≤ Google Sheets
    try:
        print(f"[trip] calling end_trip_in_sheet({full_name}, {org_name}, {start_dt!r}, {now!r}, {duration!r})")
        await end_trip_in_sheet(full_name, org_name, start_dt, now, duration)
        print("[trip] end_trip_in_sheet succeeded")
    except Exception as e:
        print(f"[trip][ERROR] end_trip_in_sheet failed: {e}")

    # —É–≤–µ–¥–æ–º–ª—è–µ–º —é–∑–µ—Ä–∞
    time_str = now.strftime("%H:%M")
    await target.reply_text(
        f"üèÅ –ü–æ–µ–∑–¥–∫–∞ –≤ *{org_name}* –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ *{time_str}*",
        parse_mode="Markdown"
    )
