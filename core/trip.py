import sqlite3
from datetime import datetime
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

from utils.database import (
    is_registered,
    save_trip_start,
    get_now,
    get_debug_mode,
    adjust_to_work_hours
)
from core.sheets import add_trip, end_trip_in_sheet

ORGANIZATIONS = {
    'kuzminsky':       "–ö—É–∑—å–º–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'lefortovsky':     "–õ–µ—Ñ–æ—Ä—Ç–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'lyublinsky':      "–õ—é–±–ª–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'meshchansky':     "–ú–µ—â–∞–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'nagatinsky':      "–ù–∞–≥–∞—Ç–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'perovsky':        "–ü–µ—Ä–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'shcherbinsky':    "–©–µ—Ä–±–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'tverskoy':        "–¢–≤–µ—Ä—Å–∫–æ–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'cheromushkinsky': "–ß–µ—Ä—ë–º—É—à–∫–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'chertanovsky':    "–ß–µ—Ä—Ç–∞–Ω–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'msk_city':        "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –≥–æ—Ä–æ–¥—Å–∫–æ–π —Å—É–¥",
    'kassatsionny2':   "–í—Ç–æ—Ä–æ–π –∫–∞—Å—Å–∞—Ü–∏–æ–Ω–Ω—ã–π —Å—É–¥ –æ–±—â–µ–π —é—Ä–∏—Å–¥–∏–∫—Ü–∏–∏",
    'domodedovo':      "–î–æ–º–æ–¥–µ–¥–æ–≤—Å–∫–∏–π –≥–æ—Ä–æ–¥—Å–∫–æ–π —Å—É–¥",
    'lyuberetsky':     "–õ—é–±–µ—Ä–µ—Ü–∫–∏–π –≥–æ—Ä–æ–¥—Å–∫–æ–π —Å—É–¥",
    'vidnoye':         "–í–∏–¥–Ω–æ–≤—Å–∫–∏–π –≥–æ—Ä–æ–¥—Å–∫–æ–π —Å—É–¥",
    'justice_peace':   "–ú–∏—Ä–æ–≤—ã–µ —Å—É–¥—å–∏ (—Å—É–¥–µ–±–Ω—ã–π —É—á–∞—Å—Ç–æ–∫)",
    'fns':             "–§–ù–°",
    'gibdd':           "–ì–ò–ë–î–î",
    'notary':          "–ù–æ—Ç–∞—Ä–∏—É—Å",
    'post':            "–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏",
    'rosreestr':       "–†–æ—Å—Ä–µ–µ—Å—Ç—Ä",
    'other':           "–î—Ä—É–≥–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è (–≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é)"
}

async def start_trip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if not is_registered(user_id):
        return await update.message.reply_text(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ /register –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω"
        )
    keyboard = [
        [InlineKeyboardButton(name, callback_data=f"org_{org_id}")]
        for org_id, name in ORGANIZATIONS.items()
    ]
    await update.message.reply_text(
        "üöó *–ö—É–¥–∞ –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å?*",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_org_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query   = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    org_id  = query.data.split("_", 1)[1]

    if org_id == "other":
        context.user_data["awaiting_custom_org"] = True
        return await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä—É—á–Ω—É—é:")

    org_name = ORGANIZATIONS.get(org_id, org_id)
    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º dt, –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ –≤ –ë–î
    start_dt = save_trip_start(user_id, org_id, org_name)
    if not start_dt:
        return await query.edit_message_text(
            "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞ "
            "–∏–ª–∏ —Å–µ–π—á–∞—Å –≤–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."
        )

    # –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ –∏ Google –ø–æ–ª—å–∑—É–µ–º—Å—è —Ç–µ–º –∂–µ dt
    time_str = start_dt.strftime("%H:%M")

    # –§–ò–û
    conn = sqlite3.connect("court_tracking.db")
    full = conn.execute(
        "SELECT full_name FROM employees WHERE user_id = ?", (user_id,)
    ).fetchone()[0]
    conn.close()

    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google —Ç–∞–∫ –∂–µ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    try:
        add_trip(full, org_name, start_dt)
    except Exception as e:
        print(f"[trip][ERROR] add_trip failed: {e}")

    await query.edit_message_text(
        f"üöå –ü–æ–µ–∑–¥–∫–∞ –≤ *{org_name}* –Ω–∞—á–∞—Ç–∞ –≤ *{time_str}*",
        parse_mode="Markdown"
    )

async def handle_custom_org_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if not context.user_data.get("awaiting_custom_org"):
        return
    context.user_data.pop("awaiting_custom_org")

    org_name = update.message.text.strip()
    start_dt = save_trip_start(user_id, "other", org_name)
    if not start_dt:
        return await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞ "
            "–∏–ª–∏ —Å–µ–π—á–∞—Å –≤–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."
        )

    time_str = start_dt.strftime("%H:%M")
    conn = sqlite3.connect("court_tracking.db")
    full = conn.execute(
        "SELECT full_name FROM employees WHERE user_id = ?", (user_id,)
    ).fetchone()[0]
    conn.close()

    try:
        add_trip(full, org_name, start_dt)
    except Exception as e:
        print(f"[trip][ERROR] add_trip(custom org) failed: {e}")

    await update.message.reply_text(
        f"üöå –ü–æ–µ–∑–¥–∫–∞ –≤ *{org_name}* –Ω–∞—á–∞—Ç–∞ –≤ *{time_str}*",
        parse_mode="Markdown"
    )

async def end_trip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ callback –∏ message
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        target = query
        user_id = query.from_user.id
    else:
        target = update.message
        user_id = update.message.from_user.id

    # –∑–∞–∫—Ä—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
    from utils.database import end_trip_local, fetch_last_completed
    ok, end_dt = end_trip_local(user_id)
    if not ok:
        return await target.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏.")

    # —Ç—è–Ω–µ–º org –∏ start
    org_name, start_dt = fetch_last_completed(user_id)
    duration = end_dt - start_dt

    # –§–ò–û
    conn = sqlite3.connect("court_tracking.db")
    full = conn.execute(
        "SELECT full_name FROM employees WHERE user_id = ?", (user_id,)
    ).fetchone()[0]
    conn.close()

    # –¥–æ–ø–∏—Å—ã–≤–∞–µ–º –≤ Google
    try:
        await end_trip_in_sheet(full, org_name, start_dt, end_dt, duration)
    except Exception as e:
        print(f"[trip][ERROR] end_trip_in_sheet failed: {e}")

    time_str = end_dt.strftime("%H:%M")
    await target.reply_text(
        f"üèÅ –ü–æ–µ–∑–¥–∫–∞ –≤ *{org_name}* –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ *{time_str}*",
        parse_mode="Markdown"
    )
