from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from utils.database import is_registered, save_trip_start, get_now
import sqlite3

# –ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
ORGANIZATIONS = {
    # 1. –ú–æ—Å–∫–æ–≤—Å–∫–∏–µ —Ä–∞–π–æ–Ω–Ω—ã–µ —Å—É–¥—ã (–ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π)
    'kuzminsky': "–ö—É–∑—å–º–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'lefortovsky': "–õ–µ—Ñ–æ—Ä—Ç–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'lyublinsky': "–õ—é–±–ª–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'meshchansky': "–ú–µ—â–∞–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'nagatinsky': "–ù–∞–≥–∞—Ç–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'perovsky': "–ü–µ—Ä–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'shcherbinsky': "–©–µ—Ä–±–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'tverskoy': "–¢–≤–µ—Ä—Å–∫–æ–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'cheremushkinsky': "–ß–µ—Ä–µ–º—É—à–∫–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",
    'chertanovsky': "–ß–µ—Ä—Ç–∞–Ω–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥",

    # 2. –ú–æ—Å–≥–æ—Ä—Å—É–¥ –∏ –∫–∞—Å—Å–∞—Ü–∏—è
    'msk_city': "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –≥–æ—Ä–æ–¥—Å–∫–æ–π —Å—É–¥",
    'kassatsionny2': "–í—Ç–æ—Ä–æ–π –∫–∞—Å—Å–∞—Ü–∏–æ–Ω–Ω—ã–π —Å—É–¥ –æ–±—â–µ–π —é—Ä–∏—Å–¥–∏–∫—Ü–∏–∏",

    # 3. –ì–æ—Ä–æ–¥—Å–∫–∏–µ —Å—É–¥—ã –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏
    'domodedovo': "–î–æ–º–æ–¥–µ–¥–æ–≤—Å–∫–∏–π –≥–æ—Ä–æ–¥—Å–∫–æ–π —Å—É–¥",
    'lyuberetsky': "–õ—é–±–µ—Ä–µ—Ü–∫–∏–π –≥–æ—Ä–æ–¥—Å–∫–æ–π —Å—É–¥",
    'vidnoye': "–í–∏–¥–Ω–æ–≤—Å–∫–∏–π –≥–æ—Ä–æ–¥—Å–∫–æ–π —Å—É–¥",

    # 4. –ü—Ä–æ—á–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É)
    'justice_peace': "–ú–∏—Ä–æ–≤—ã–µ —Å—É–¥—å–∏ (—Å—É–¥–µ–±–Ω—ã–π —É—á–∞—Å—Ç–æ–∫)",
    'fns': "–§–ù–°",
    'gibdd': "–ì–ò–ë–î–î",
    'notary': "–ù–æ—Ç–∞—Ä–∏—É—Å",
    'post': "–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏",
    'rosreestr': "–†–æ—Å—Ä–µ–µ—Å—Ç—Ä",

    # 5. –î—Ä—É–≥–æ–µ
    'other': "–î—Ä—É–≥–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è (—É–∫–∞–∑–∞—Ç—å)"
}

async def start_trip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if not is_registered(user_id):
        await update.message.reply_text(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: `/register –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω`",
            parse_mode="Markdown"
        )
        return

    keyboard = [
        [InlineKeyboardButton(name, callback_data=f"org_{org_id}")]
        for org_id, name in ORGANIZATIONS.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üöó *–ö—É–¥–∞ –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å?*\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –Ω–∏–∂–µ:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def handle_custom_org_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    custom_org = update.message.text.strip()

    if not custom_org:
        await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    if not is_registered(user_id):
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    success = save_trip_start(user_id, "other", custom_org)
    time_now = get_now().strftime("%H:%M")

    if success:
        await update.message.reply_text(
            f"üöÄ –ü–æ–µ–∑–¥–∫–∞ –≤ *{custom_org}* –Ω–∞—á–∞—Ç–∞ –≤ *{time_now}*\n–•–æ—Ä–æ—à–µ–π –¥–æ—Ä–æ–≥–∏! üöó",
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –ø–æ–µ–∑–¥–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –≤ –ø—É—Ç–∏.")

async def end_trip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    now = get_now()

    conn = sqlite3.connect('court_tracking.db')
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE trips 
        SET end_datetime = ?, status = 'completed'
        WHERE user_id = ? AND status = 'in_progress'
    ''', (now, user_id))

    if cursor.rowcount > 0:
        await update.message.reply_text(
            f"üèÅ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ—Ñ–∏—Å!\n–ü–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ *{now.strftime('%H:%M')}*",
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_text(
            "‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏*",
            parse_mode="Markdown"
        )

    conn.commit()
    conn.close()

async def handle_trip_save(update: Update, context, org_id: str, org_name: str):
    user_id = update.effective_user.id
    success = save_trip_start(user_id, org_id, org_name)
    time_now = get_now().strftime('%H:%M')

    if success:
        await update.callback_query.edit_message_text(
            f"üöå –ü–æ–µ–∑–¥–∫–∞ –≤ *{org_name}* –Ω–∞—á–∞—Ç–∞ –≤ *{time_now}*\n–•–æ—Ä–æ—à–µ–π –¥–æ—Ä–æ–≥–∏! üöó",
            parse_mode="Markdown"
        )
    else:
        await update.callback_query.edit_message_text(
            "‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –ø–æ–µ–∑–¥–∫—É.*\n–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –≤ –ø—É—Ç–∏.",
            parse_mode="Markdown"
        )
