# bot.py

import os
import time
import logging  # –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from dotenv import load_dotenv
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters
)
from handlers.commands import (
    register_command,
    trip_command,
    return_command,
    report_command
)
from handlers.callbacks import (
    organization_callback,
    end_trip_callback,
    plan_org_callback
)
from handlers.menu import handle_main_menu
from keep_alive import keep_alive
from scheduler import start_scheduler

load_dotenv()
keep_alive()
# –¥–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
time.sleep(3)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî —á—Ç–æ–±—ã INFO –∏ –≤—ã—à–µ —à–ª–∏ –≤ bot.log
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s: %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)

TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    print("‚ùå BOT_TOKEN is missing")
    exit(1)

async def on_startup(app):
    # –£–±–∏—Ä–∞–µ–º webhook, —á—Ç–æ–±—ã —Ä–∞–∑—Ä–µ—à–∏—Ç—å polling
    await app.bot.delete_webhook(drop_pending_updates=True)
    print("üü¢ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω (–≤–µ–±—Ö—É–∫ —É–¥–∞–ª—ë–Ω, polling –≥–æ—Ç–æ–≤)")

def main():
    app = (
        ApplicationBuilder()
        .token(TOKEN)
        .job_queue(None)            # –æ—Ç–∫–ª—é—á–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π JobQueue PTB
        .post_init(on_startup)
        .build()
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è CommandHandler'–æ–≤
    app.add_handler(register_command)   # /register
    app.add_handler(trip_command)       # /trip
    app.add_handler(return_command)     # /return
    app.add_handler(report_command)     # /report

    # –†–æ—É—Ç–∏–Ω–≥ –ø–æ —Ç–µ–∫—Å—Ç—É –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline-–∫–Ω–æ–ø–æ–∫
    app.add_handler(organization_callback)   # –≤—ã–±–æ—Ä —Å—É–¥–∞
    app.add_handler(end_trip_callback)       # inline callback "end_trip"
    app.add_handler(plan_org_callback)       # inline callback "plan_org_*"

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    start_scheduler()

    print("‚è≥ –ó–∞–ø—É—Å–∫ polling...")
    app.run_polling(drop_pending_updates=True, allowed_updates=["message", "callback_query"])

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        print(f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
