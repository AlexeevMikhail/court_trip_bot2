import os
import time
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters
from handlers.commands import register_command, trip_command, return_command, report_command
from handlers.callbacks import organization_callback
from handlers.menu import handle_main_menu
from utils.database import init_db
from dotenv import load_dotenv
from keep_alive import keep_alive
from scheduler import start_scheduler  # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫

load_dotenv()  # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

# –ï—Å–ª–∏ –Ω—É–∂–µ–Ω Flask (–º–æ–∂–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
keep_alive()
time.sleep(3)

TOKEN = os.getenv("BOT_TOKEN")

async def on_startup(app):
    print("üü¢ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

def main():
    try:
        init_db()
        app = ApplicationBuilder().token(TOKEN).post_init(on_startup).build()

        app.add_handler(register_command)
        app.add_handler(trip_command)
        app.add_handler(return_command)
        app.add_handler(report_command)
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu))
        app.add_handler(organization_callback)

        start_scheduler()  # ‚Üê –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–µ–∑–¥–æ–∫

        print("‚è≥ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        app.run_polling(
            drop_pending_updates=True,
            allowed_updates=["message", "callback_query"]
        )

    except Exception as e:
        print(f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        time.sleep(10)
        main()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
